from io import FileIO
from re import template
import requests
from Bio.PDB import MMCIF2Dict
from Bio.PDB.MMCIFParser import FastMMCIFParser
from Bio.PDB.NeighborSearch import NeighborSearch
from Bio.PDB.Residue import Residue
from Bio.PDB.Structure import Structure
from Bio.Align import MultipleSeqAlignment
from Bio.PDB.Chain import Chain
from Bio.SeqRecord import SeqRecord
from Bio.Seq import Seq
from Bio import pairwise2
import gemmi
import tempfile

# RCSB_ID  = "3J7Z"
# URL      = "https://api.ribosome.xyz/static_files/download_structure/?struct_id=4v7s"
# response = requests.get(URL)

# with open("{}.cif".format(RCSB_ID), "wb") as outfile:
#     outfile.write(response.content)



def find_23s_target(rcsb_id:str):
    target = gemmi.cif.read_file('5AFI.cif')
    block = target.sole_block()
    STRAND= None
    for ( strand,nomclass ) in zip( block.find_loop('_ribosome_nomenclature.entity_poly.pdbx_strand_id'), block.find_loop('_ribosome_nomenclature.polymer_class')):
        if nomclass == '23SrRNA':
            STRAND = strand
            break
    # for ( chain_id,one_letter_code )  in zip( 
    #                                         block.find_loop('_entity_poly.pdbx_strand_id'),
    #                                         block.find_loop('_entity_poly.pdbx_seq_one_letter_code')
    #                                         ):
    #     print(chain_id,one_letter_code)

find_23s_target('5AFI')
# cif = gemmi.cif.read_file('3J7Z.cif')
# block = cif.sole_block()
# ecoli23srrna ="GGUUAAGCGACUAAGCGUACACGGUGGAUGCCCUGGCAGUCAGAGGCGAUGAAGGACGUGCUAAUCUGCGAUAAGCGUCGGUAAGGUGAUAUGAACCGUUAUAACCGGCGAUUUCCGAAUGGGGAAACCCAGUGUGUUUCGACACACUAUCAUUAACUGAAUCCAUAGGUUAAUGAGGCGAACCGGGGGAACUGAAACAUCUAAGUACCCCGAGGAAAAGAAAUCAACCGAGAUUCCCCCAGUAGCGGCGAGCGAACGGGGAGCAGCCCAGAGCCUGAAUCAGUGUGUGUGUUAGUGGAAGCGUCUGGAAAGGCGCGCGAUACAGGGUGACAGCCCCGUACACAAAAAUGCACAUGCUGUGAGCUCGAUGAGUAGGGCGGGACACGUGGUAUCCUGUCUGAAUAUGGGGGGACCAUCCUCCAAGGCUAAAUACUCCUGACUGACCGAUAGUGAACCAGUACCGUGAGGGAAAGGCGAAAAGAACCCCGGCGAGGGGAGUGAAAAAGAACCUGAAACCGUGUACGUACAAGCAGUGGGAGCACGCUUAGGCGUGUGACUGCGUACCUUUUGUAUAAUGGGUCAGCGACUUAUAUUCUGUAGCAAGGUUAACCGAAUAGGGGAGCCGAAGGGAAACCGAGUCUUAACUGGGCGUUAAGUUGCAGGGUAUAGACCCGAAACCCGGUGAUCUAGCCAUGGGCAGGUUGAAGGUUGGGUAACACUAACUGGAGGACCGAACCGACUAAUGUUGAAAAAUUAGCGGAUGACUUGUGGCUGGGGGUGAAAGGCCAAUCAAACCGGGAGAUAGCUGGUUCUCCCCGAAAGCUAUUUAGGUAGCGCCUCGUGAAUUCAUCUCCGGGGGUAGAGCACUGUUUCGGCAAGGGGGUCAUCCCGACUUACCAACCCGAUGCAAACUGCGAAUACCGGAGAAUGUUAUCACGGGAGACACACGGCGGGUGCUAACGUCCGUCGUGAAGAGGGAAACAACCCAGACCGCCAGCUAAGGUCCCAAAGUCAUGGUUAAGUGGGAAACGAUGUGGGAAGGCCCAGACAGCCAGGAUGUUGGCUUAGAAGCAGCCAUCAUUUAAAGAAAGCGUAAUAGCUCACUGGUCGAGUCGGCCUGCGCGGAAGAUGUAACGGGGCUAAACCAUGCACCGAAGCUGCGGCAGCGACGCUUAUGCGUUGUUGGGUAGGGGAGCGUUCUGUAAGCCUGCGAAGGUGUGCUGUGAGGCAUGCUGGAGGUAUCAGAAGUGCGAAUGCUGACAUAAGUAACGAUAAAGCGGGUGAAAAGCCCGCUCGCCGGAAGACCAAGGGUUCCUGUCCAACGUUAAUCGGGGCAGGGUGAGUCGACCCCUAAGGCGAGGCCGAAAGGCGUAGUCGAUGGGAAACAGGUUAAUAUUCCUGUACUUGGUGUUACUGCGAAGGGGGGACGGAGAAGGCUAUGUUGGCCGGGCGACGGUUGUCCCGGUUUAAGCGUGUAGGCUGGUUUUCCAGGCAAAUCCGGAAAAUCAAGGCUGAGGCGUGAUGACGAGGCACUACGGUGCUGAAGCAACAAAUGCCCUGCUUCCAGGAAAAGCCUCUAAGCAUCAGGUAACAUCAAAUCGUACCCCAAACCGACACAGGUGGUCAGGUAGAGAAUACCAAGGCGCUUGAGAGAACUCGGGUGAAGGAACUAGGCAAAAUGGUGCCGUAACUUCGGGAGAAGGCACGCUGAUAUGUAGGUGAGGUCCCUCGCGGAUGGAGCUGAAAUCAGUCGAAGAUACCAGCUGGCUGCAACUGUUUAUUAAAAACACAGCACUGUGCAAACACGAAAGUGGACGUAUACGGUGUGACGCCUGCCCGGUGCCGGAAGGUUAAUUGAUGGGGUUAGCGCAAGCGAAGCUCUUGAUCGAAGCCCCGGUAAACGGCGGCCGUAACUAUAACGGUCCUAAGGUAGCGAAAUUCCUUGUCGGGUAAGUUCCGACCUGCACGAAUGGCGUAAUGAUGGCCAGGCUGUCUCCACCCGAGACUCAGUGAAAUUGAACUCGCUGUGAAGAUGCAGUGUACCCGCGGCAAGACGGAAAGACCCCGUGAACCUUUACUAUAGCUUGACACUGAACAUUGAGCCUUGAUGUGUAGGAUAGGUGGGAGGCUUUGAAGUGUGGACGCCAGUCUGCAUGGAGCCGACCUUGAAAUACCACCCUUUAAUGUUUGAUGUUCUAACGUUGACCCGUAAUCCGGGUUGCGGACAGUGUCUGGUGGGUAGUUUGACUGGGGCGGUCUCCUCCUAAAGAGUAACGGAGGAGCACGAAGGUUGGCUAAUCCUGGUCGGACAUCAGGAGGUUAGUGCAAUGGCAUAAGCCAGCUUGACUGCGAGCGUGACGGCGCGAGCAGGUGCGAAAGCAGGUCAUAGUGAUCCGGUGGUUCUGAAUGGAAGGGCCAUCGCUCAACGGAUAAAAGGUACUCCGGGGAUAACAGGCUGAUACCGCCCAAGAGUUCAUAUCGACGGCGGUGUUUGGCACCUCGAUGUCGGCUCAUCACAUCCUGGGGCUGAAGUAGGUCCCAAGGGUAUGGCUGUUCGCCAUUUAAAGUGGUACGCGAGCUGGGUUUAGAACGUCGUGAGACAGUUCGGUCCCUAUCUGCCGUGGGCGCUGGAGAACUGAGGGGGGCUGCUCCUAGUACGAGAGGACCGGAGUGGACGCAUCACUGGUGUUCGGGUUGUCAUGCCAAUGGCACUGCCCGGUAGCUAAAUGCGGAAGAGAUAAGUGCUGAAAGCAUCUAAGCACGAAACUUGCCCCGAGAUGAGUUCUCCCUGACCCUUUAAGGGUCCUGAAGGAACGUUGAAGACGACGACGUUGAUAGGCCGGGUGUGUAAGCGCAGCGAUGCGUUGAGCUAACCGGUACUAAUGAACCGUGAGGCUUAACCU"

# --- alignment
# _            = pairwise2.align.globalxx(self.src,self.tgt, one_alignment_only=True)
# self.src_aln = _[0].seqA
# self.tgt_aln = _[0].seqB


# for ( chain_id,one_letter_code )  in zip( 
#                                          block.find_loop('_entity_poly.pdbx_strand_id'),
#                                          block.find_loop('_entity_poly.pdbx_seq_one_letter_code')
#                                         ):
#     print(chain_id,one_letter_code)



# s1= "AAAAASDF"
# s2= "TAAAAASDF"
# s3= "TAAGGAASDF"

# s1 = SeqRecord(Seq(s1))
# s2 = SeqRecord(Seq(s2))
# s3 = SeqRecord(Seq(s3))

# maxlen = max(len(s1), len(s2), len(s3))
# for record in [s1,s2,s3]:
#     if len(record.seq) != maxlen:
#         sequence = str(record.seq).ljust(maxlen, '.')
#         record.seq = Seq(sequence)
# assert all(len(record.seq) == maxlen for record in [s1,s2,s3])

# ms= MultipleSeqAlignment([s1,s2,s3])

# for i in block:
#     print(block)



# with tempfile.NamedTemporaryFile() as outfile:
#     outfile.write(response.content)
#     outfile.flush()
#     filename = outfile.name
#     # cifstruct = FastMMCIFParser(QUIET=True).get_structure(RCSB_ID, filename)
#     # y = MMCIF2Dict.MMCIF2Dict(filename)
#     # doc   = gemmi.cif.read_file(filename)

#     cif_block = gemmi.cif.read(filename)[0]
#     structure = gemmi.make_structure_from_block(cif_block)
#     # for entity in structure.entities:
#     #     print(dir(entity))
#     #     print(entity.name)
#     #     print(entity.polymer_type)
#     #     print(entity.full_sequence)
        
#     for chain in structure:
#         print(chain)





