from xml.etree.ElementTree import Element, SubElement, Comment, tostring
from xml.etree import ElementTree
from xml.dom import minidom
from operator import itemgetter as get
import os

import json
import time

import asyncio
import aiofiles as aiof

def prettify(elem):
    """Return a pretty-printed XML string for the Element."""
    rough_string = ElementTree.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")


def apply_params_to_default(args):
    # Mole Defaults
    presets = {
        'Input': '/home/rtviii/dev/django_react_standalone/ribosome.xyz-backend/static/pdb-structs/5nwy-tunnel-w-30.pdb',
        'Output': '/home/rtviii/dev/django_react_standalone/ribosome.xyz-backend/static/mole-outputs/',
        'Cavity': {
            'ProbeRadius': '3',
            'InteriorThreshold': '1.25'
        },
        'Tunnel': {
            'SurfaceCoverRadius': '10',
            'OriginRadius': "5",
            'AutoOriginCoverRadius': "10"
        },
        'Formats': {
            'Mesh': "1", 'PyMol': "1", 'CSV': "1"
        },
        'Types': {
            'Cavities': "1", 'Tunnels': "1"
        },
        'Mesh': {
            'Density': "1.33", 'Compress': "1"
        },
        'PyMol': {
            'SurfaceType': "Surface"
        },
        'Origins': {
        }
    }
    # Paths
    if "Input" in args:
        presets['Input'] = args["Input"]
    if "Output" in args:
        print("Output overriden!\n\n\n\n")
        presets['Output'] = args['Output']


    # Params
    # Cavity
    for preset in ["ProbeRadius", "InteriorThreshold", "MinDepth"]:
        if preset in args:
            presets['Cavity'][preset] = args[preset]
    # Tunnel
    for preset in ["OriginRadius", "SurfaceCoverRadius", 'BottleneckRadius', 'MinTunnelLength', 'MinPoreLength', 'MaxTunnelSimilarity', 'BottleneckTolerance']:
        if preset in args:
            presets['Tunnel'][preset] = args[preset]
    # Export
    if "exports" in args:
        if args['exports'] == 't':
            presets['Types'] = {"Tunnels": "1"}
        if args['exports'] == 'tc':
            presets['Types'] = {"Tunnels": "1", "Cavities": "1"}
        if args['exports'] == 'tcp':
            presets['Types'] = {"Tunnels": "1", "Cavities": "1",
                                "PoresAuto": "1", "PoresMerged": "1", "PoresUser": "1"}
    if "Residues" in args:
        presets['Origins']['Residues'] = args['Residues'][0]
    if "Points" in args:
        presets['Origins']['Points'] = args['Points'][0]

    return presets


async def make_input_config(arguments: dict):
    presets = apply_params_to_default(arguments)
    print('\n PRESETS', presets)
    Tunnels = Element('Tunnels')
    comment = Comment('This template was autogenerated.')
    Tunnels.append(comment)
    # IO
    t_inputfile = SubElement(Tunnels, 'Input')
    t_inputfile.text = presets['Input']
    t_workdir = SubElement(Tunnels, 'WorkingDirectory')
    t_workdir.text = presets['Output']
    # Params
    t_params = SubElement(Tunnels, "Params")
    # Cavity
    t_cavity = SubElement(t_params, "Cavity", presets['Cavity'])
    # Tunnels
    t_tunnel = SubElement(t_params, "Tunnel", presets['Tunnel'])
    # Export
    t_export = SubElement(Tunnels, "Export")
    t_formats = SubElement(t_export, "Formats", presets['Formats'])
    t_types = SubElement(t_export, "Types", presets['Types'])
    t_mesh = SubElement(t_export, "Mesh", presets['Mesh'])
    t_pymol = SubElement(t_export, "PyMol", presets['PyMol'])
    t_origins = SubElement(Tunnels, "Origins")

    if "Points" in presets['Origins']:
        t_origin = SubElement(t_origins, "Origin")
        for pt in presets['Origins']['Points']:
            x, y, z = pt.split(',')
            point_coords = {"X": x, "Y": y, "Z": z}
            SubElement(t_origin, "Point", point_coords)
    elif "Residues" in presets['Origins']:
        t_origin = SubElement(t_origins, "Origin")
        for resn in presets['Origins']['Residues']:
            resn_attrs= {"Chain":resn[0], "SequenceNumber":resn[1]}
            SubElement(t_origin, "Residue", resn_attrs)
    else:
        t_origins.set('Auto', "1")


    writeable =open('input-auto.xml', mode='w') 
    writeable.write(prettify(Tunnels))
    

